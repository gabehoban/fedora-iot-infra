name: Build and Sign Fedora IoT GPS Image

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'fedora-iot-infra.toml'
      - '.github/workflows/build-and-sign-image.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'fedora-iot-infra.toml'
  schedule:
    # Rebuild weekly to get latest security updates
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/fedora-iot-infra
  BLUEPRINT_NAME: fedora-iot-infra

permissions:
  contents: read
  packages: write
  id-token: write  # For cosign OIDC
  attestations: write

jobs:
  build-image:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install OSTree and Image Builder tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ostree \
          rpm \
          dnf \
          podman \
          skopeo
        
        # Install osbuild tools
        echo "deb [trusted=yes] https://download.opensuse.org/repositories/devel:/osbuild/xUbuntu_22.04/ ./" | sudo tee /etc/apt/sources.list.d/osbuild.list
        sudo apt-get update
        sudo apt-get install -y osbuild osbuild-composer

    - name: Create build environment
      run: |
        # Create workspace
        mkdir -p build/{ostree-repo,artifacts}
        
        # Initialize OSTree repo
        ostree init --repo=build/ostree-repo --mode=archive

    - name: Build OSTree commit with container
      id: build
      run: |
        # Create Containerfile for building
        cat > Containerfile << 'EOF'
        FROM registry.fedoraproject.org/fedora:39
        
        RUN dnf install -y \
          osbuild \
          osbuild-composer \
          composer-cli \
          ostree \
          rpm-ostree \
          systemd-container \
          && dnf clean all
        
        COPY fedora-iot-infra.toml /workspace/
        WORKDIR /workspace
        
        # Build the OSTree commit
        RUN ostree init --repo=repo --mode=archive && \
            rpm-ostree compose tree \
              --repo=repo \
              --cachedir=cache \
              fedora-iot-infra.toml
        EOF
        
        # Build container with OSTree commit
        buildah build -t local/fedora-iot-infra-builder .
        
        # Extract OSTree repo from container
        buildah run local/fedora-iot-infra-builder tar -C /workspace -czf - repo | tar -C build -xzf -
        mv build/repo build/ostree-repo
        
        # Get commit hash
        COMMIT_HASH=$(ostree log --repo=build/ostree-repo fedora-iot-infra | head -1 | awk '{print $2}')
        echo "commit-hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        
        # Create container image with OSTree content
        cat > Containerfile.final << EOF
        FROM scratch
        COPY build/ostree-repo /ostree-repo
        LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
        LABEL org.opencontainers.image.description="Fedora IoT with GPS HAT support"
        LABEL org.opencontainers.image.revision="$COMMIT_HASH"
        EOF
        
        # Build and push final image
        IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
        buildah build -f Containerfile.final -t "$IMAGE_TAG" .
        
        # Push image and get digest
        DIGEST=$(buildah push --digestfile=/tmp/digest "$IMAGE_TAG" docker://"$IMAGE_TAG")
        IMAGE_DIGEST=$(cat /tmp/digest)
        
        echo "digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
        echo "image-url=$IMAGE_TAG@$IMAGE_DIGEST" >> $GITHUB_OUTPUT
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Generate build metadata
      id: metadata
      run: |
        cat > build-metadata.json << EOF
        {
          "timestamp": "$(date -Iseconds)",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "blueprint": "fedora-iot-infra.toml",
          "ostree_commit": "${{ steps.build.outputs.commit-hash }}",
          "image_digest": "${{ steps.build.outputs.digest }}"
        }
        EOF
        
        echo "metadata-file=build-metadata.json" >> $GITHUB_OUTPUT

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ostree-repo-${{ github.run_id }}
        path: |
          build/ostree-repo/
          build-metadata.json
        retention-days: 30

  sign-image:
    needs: build-image
    runs-on: ubuntu-latest
    
    steps:
    - name: Install cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.4'

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign container image with cosign
      env:
        IMAGE_URL: ${{ needs.build-image.outputs.image-url }}
      run: |
        # Sign with keyless mode using OIDC
        cosign sign --yes \
          -a "repo=${{ github.repository }}" \
          -a "workflow=${{ github.workflow }}" \
          -a "ref=${{ github.ref }}" \
          -a "commit=${{ github.sha }}" \
          "$IMAGE_URL"

    - name: Generate SLSA provenance
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ needs.build-image.outputs.image-digest }}

  verify-image:
    needs: [build-image, sign-image]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Install crane
      run: |
        curl -sL "https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz" | \
        sudo tar -xzC /usr/local/bin crane

    - name: Verify signature
      env:
        IMAGE_URL: ${{ needs.build-image.outputs.image-url }}
      run: |
        # Verify signature exists
        cosign verify \
          --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
          --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
          "$IMAGE_URL"

    - name: Verify attestation
      env:
        IMAGE_URL: ${{ needs.build-image.outputs.image-url }}
      run: |
        # Verify SLSA provenance
        cosign verify-attestation \
          --type="slsaprovenance1" \
          --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
          --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
          "$IMAGE_URL"

  create-release:
    needs: [build-image, sign-image, verify-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ostree-repo-${{ github.run_id }}
        path: artifacts/

    - name: Create release archive
      run: |
        cd artifacts
        tar -czf ../fedora-iot-infra-$(date +%Y%m%d)-${{ github.run_id }}.tar.gz .
        cd ..
        sha256sum fedora-iot-infra-*.tar.gz > checksums.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          fedora-iot-infra-*.tar.gz
          checksums.txt
        body: |
          ## Fedora IoT GPS HAT Image Release
          
          **Container Image**: `${{ needs.build-image.outputs.image-url }}`
          
          **Build Information**:
          - Commit: ${{ github.sha }}
          - Build Date: $(date -Iseconds)
          - OSTree Commit: ${{ needs.build-image.outputs.commit-hash }}
          
          **Verification**:
          ```bash
          # Verify signature
          cosign verify --certificate-identity-regexp="https://github.com/${{ github.repository }}" \\
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \\
            ${{ needs.build-image.outputs.image-url }}
          ```
          
          **Usage**:
          ```bash
          # Pull OSTree repository
          skopeo copy docker://${{ needs.build-image.outputs.image-url }} dir:fedora-iot-infra
          
          # Deploy to device
          ostree pull-local fedora-iot-infra/ostree-repo fedora-iot-infra
          ```
