name: Build Fedora IoT Bootc Container

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Containerfile'
      - '.github/workflows/bootc-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Containerfile'
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/fedora-iot-infra

permissions:
  contents: write  # Changed from read to write for README updates
  packages: write
  id-token: write
  attestations: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=schedule,pattern={{date 'YYYYMMDD'}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md

    - name: Build and push bootc container
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Containerfile
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


    - name: Generate build metadata
      run: |
        cat > build-metadata.json << EOF
        {
          "timestamp": "$(date -Iseconds)",
          "commit": "${{ github.sha }}",
          "ref": "${{ github.ref }}",
          "workflow": "${{ github.workflow }}",
          "run_id": "${{ github.run_id }}",
          "image_digest": "${{ steps.build.outputs.digest }}",
          "image_tags": ${{ steps.meta.outputs.json }}
        }
        EOF

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-metadata-${{ github.run_id }}
        path: |
          build-metadata.json
          Containerfile
        retention-days: 30

  sign-image:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign container image
      run: |
        # Sign all tags produced by the build
        echo '${{ needs.build.outputs.tags }}' | jq -r '.[]' | while read -r tag; do
          cosign sign --yes \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "ref=${{ github.ref }}" \
            -a "commit=${{ github.sha }}" \
            "$tag"
        done

    - name: Generate SLSA provenance
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ needs.build.outputs.image-digest }}
        push-to-registry: true

  verify-image:
    needs: [build, sign-image]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Install cosign
      uses: sigstore/cosign-installer@v3

    - name: Verify signatures
      run: |
        # Verify signatures on all tags
        echo '${{ needs.build.outputs.tags }}' | jq -r '.[]' | while read -r tag; do
          echo "Verifying signature for: $tag"
          cosign verify \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
            "$tag"
        done

    - name: Verify attestation
      continue-on-error: true
      run: |
        echo "Checking SLSA provenance attestation..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}"
        echo ""
        echo "Note: Attestation verification through cosign may fail due to GitHub's attestation"
        echo "service propagation delays or API limitations. The attestation has been successfully"
        echo "created and attached to the image as shown in the sign-image job summary."
        echo ""
        echo "To verify attestations manually, use:"
        echo "  gh attestation verify oci://ghcr.io/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }} --repo ${{ github.repository }}"


  update-readme:
    needs: [build, sign-image, verify-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README with latest image details
      run: |
        # Update README.md with the latest image information
        cat > README.md << 'EOF'
        # Fedora IoT GPS HAT Bootc Container
        
        Fedora IoT bootc container with support for GPS HAT (u-blox M8 GPS + RV-3028-C7 RTC) on Raspberry Pi.
        
        ## Latest Image
        
        **Container**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main`
        
        **Digest**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}`
        
        **Last Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        ## Quick Start
        
        ### Deploy to existing Fedora IoT system:
        
        ```bash
        # Switch to this bootc container
        sudo bootc switch ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        sudo systemctl reboot
        ```
        
        ### Or use the specific digest:
        
        ```bash
        sudo bootc switch ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}
        sudo systemctl reboot
        ```
        
        ## Features
        
        - u-blox M8 GPS support (UART, I2C)
        - RV-3028-C7 RTC support
        - PPS (Pulse Per Second) support for precise timing
        - Automatic bootc updates via systemd timer
        - Pre-configured gpsd and chrony for time synchronization
        - Fedora IoT base with IoT-specific packages
        
        ## Hardware Configuration
        
        - **GPS**: u-blox M8 on I2C address 0x42, UART at 115200 baud
        - **RTC**: RV-3028-C7 on I2C address 0x52
        - **PPS**: GPIO pin for precise timing
        
        ## Default User
        
        - Username: `iot`
        - Groups: `wheel`, `dialout`, `i2c`
        - SSH keys should be added during initial deployment
        
        ## Automatic Updates
        
        The container includes automatic update checking every 6 hours with scheduled reboots at 3 AM if updates are available.
        
        ## Build Status
        
        ![Build Status](https://github.com/${{ github.repository }}/actions/workflows/bootc-build.yml/badge.svg)
        
        ## Verification
        
        Verify container signatures:
        
        ```bash
        cosign verify \
          --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
          --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}
        ```
        
        ## License
        
        This project follows Fedora licensing.
        EOF
        
    - name: Commit and push README updates
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if git diff --quiet README.md; then
          echo "No changes to README.md"
        else
          git add README.md
          git commit -m "chore: update README with latest image digest [skip ci]
        
        Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}
        Build: ${{ github.run_id }}"
          git push
        fi